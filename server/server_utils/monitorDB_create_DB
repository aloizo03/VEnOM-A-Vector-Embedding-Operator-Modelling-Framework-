--
-- File generated with SQLiteStudio v3.4.1 on Thu Apr 17 09:32:08 2025
--
-- Text encoding used: System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Store_Vectors
DROP TABLE IF EXISTS Store_Vectors;
CREATE TABLE IF NOT EXISTS Store_Vectors(store_id INTEGER PRIMARY KEY AUTOINCREMENT, store_name TEXT NOT NULL);
INSERT INTO Store_Vectors (store_id, store_name) VALUES (1, 'Local Store');
INSERT INTO Store_Vectors (store_id, store_name) VALUES (2, 'Qdrant');

-- Table: Vector_Dimension
DROP TABLE IF EXISTS Vector_Dimension;
CREATE TABLE IF NOT EXISTS Vector_Dimension(VEC_DIM INT PRIMARY KEY NOT NULL);
INSERT INTO Vector_Dimension (VEC_DIM) VALUES (40);
INSERT INTO Vector_Dimension (VEC_DIM) VALUES (100);
INSERT INTO Vector_Dimension (VEC_DIM) VALUES (200);
INSERT INTO Vector_Dimension (VEC_DIM) VALUES (300);
INSERT INTO Vector_Dimension (VEC_DIM) VALUES (128);

-- Table: Dataset_Vectors
DROP TABLE IF EXISTS Dataset_Vectors;
CREATE TABLE IF NOT EXISTS Dataset_Vectors(id INTEGER PRIMARY KEY AUTOINCREMENT, vector_name TEXT NOT NULL, store_id INTEGER NOT NULL, data_type INT NOT NULL default 1, Dataset_id INT, FOREIGN KEY(store_id) REFERENCES Store_Vectors(store_id));

-- Table: datasets
DROP TABLE IF EXISTS datasets;
CREATE TABLE IF NOT EXISTS datasets(id INTEGER PRIMARY KEY AUTOINCREMENT, dataset_name TEXT NOT NULL UNIQUE, datapath TEXT NOT NULL, data_type INTEGER NOT NULL);

-- Table: Models_Table
DROP TABLE IF EXISTS Models_Table;
CREATE TABLE IF NOT EXISTS Models_Table(id INT PRIMARY KEY NOT NULL, model_name TEXT NOT NULL, vec_dim INT NOT NULL, model_path TEXT NOT NULL, data_type INT NOT NULL);
INSERT INTO Models_Table (id, model_name, vec_dim, model_path, data_type) VALUES (1, 'TabData40DIM', 40, '/home/ubuntu/Projects/VectorEmbedding-Representation-/results/trained_models/Opt_Adam_HPC_in_all_dataset_e100_v40/weights/best.pt', 1);
INSERT INTO Models_Table (id, model_name, vec_dim, model_path, data_type) VALUES (2, 'TabData100DIM', 100, '/home/ubuntu/Projects/VectorEmbedding-Representation-/results/trained_models/Opt_adam_all_data_e100_v100/weights/best.pt', 1);
INSERT INTO Models_Table (id, model_name, vec_dim, model_path, data_type) VALUES (3, 'TabData200DIM', 200, '/home/ubuntu/Projects/VectorEmbedding-Representation-/results/trained_models/Opt_adam_all_data_e100_v200/weights/best.pt', 1);
INSERT INTO Models_Table (id, model_name, vec_dim, model_path, data_type) VALUES (4, 'TabData300DIM', 300, '/home/ubuntu/Projects/VectorEmbedding-Representation-/results/trained_models/Opt_adam_all_data_e100_v300/weights/best.pt', 1);
INSERT INTO Models_Table (id, model_name, vec_dim, model_path, data_type) VALUES (5, 'Graph2Vec_128DIM', 128, '/home/ubuntu/Projects/VectorEmbedding-Representation-/results/trained_models/graph_vectors/graph2vec_model.pkl', 2);

-- Table: Operator_Modelling
DROP TABLE IF EXISTS Operator_Modelling;
CREATE TABLE IF NOT EXISTS Operator_Modelling(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE NOT NULL, output_path TEXT NOT NULL, sim_search_id INT NOT NULL, metrics TEXT NOT NULL, operator TEXT NOT NULL);

-- Table: Sim_Search
DROP TABLE IF EXISTS Sim_Search;
CREATE TABLE IF NOT EXISTS Sim_Search(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE NOT NULL, pred_datapath TEXT NOT NULL, stored_sim_search TEXT NOT NULL, vector_id INTEGER REFERENCES Dataset_Vectors(id));


-- Table: tasks
DROP TABLE IF EXISTS tasks;
CREATE TABLE IF NOT EXISTS tasks(task_id INTEGER PRIMARY KEY AUTOINCREMENT, task_number  INTEGER UNIQUE NOT NULL, execution_time DOUBLE, is_complete INTEGER NOT NULL, description TEXT);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
